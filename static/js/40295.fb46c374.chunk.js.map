{"version":3,"file":"static/js/40295.fb46c374.chunk.js","mappings":"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","sources":["compontents/Path.tsx","navigation/Nft.tsx"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\r\nimport { Fragment } from \"react/jsx-runtime\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { usePropsContext } from \"./StateContext\";\r\n\r\nimport { CoinData } from \"./StateContext\";\r\n\r\nconst Path = ({className}: any) => {\r\n    const [pathData, setPathData] = useState<CoinData[]>();\r\n\r\n    const {data} = usePropsContext();\r\n\r\n    const location = useLocation();\r\n    const pathnames = location.pathname.split('/').filter((x) => x);\r\n\r\n    useEffect(() => {\r\n        const dataForPath = data.map(item => ({...item, id: item.id}));\r\n        setPathData(dataForPath);\r\n    }, []);\r\n\r\n    return (\r\n        <nav className={`py-6 aria-label=\"Breadcrumb ${className}`}>\r\n        <ol className=\"flex flex-wrap items-center gap-2 text-sm text-gray-600\">\r\n        <li>\r\n            <Link to=\"/\" className=\"block transition hover:text-gray-700 text-black\">\r\n            <span className=\"sr-only\">Home</span>\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"w-5 h-5 md:w-6 md:h-6\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n            >\r\n                <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\r\n                />\r\n            </svg>\r\n            </Link>\r\n        </li>\r\n\r\n        {pathnames.map((value, index) => {\r\n            const to = `/${pathnames.slice(0, index + 1).join('/')}`;\r\n            const currentItem = pathData ? pathData.find((item) => item.id === value) : null;\r\n            console.log(currentItem)\r\n\r\n            return (\r\n            <Fragment key={to}>\r\n                <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                strokeWidth=\"1.5\"\r\n                stroke=\"currentColor\"\r\n                className=\"w-4 h-4 md:w-5 md:h-5 text-gray-500\"\r\n                >\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 20.247l6-16.5\" />\r\n                </svg>\r\n                <li>\r\n                <Link\r\n                    to={to}\r\n                    className=\"block transition hover:text-gray-700 xs:text-xs md:text-md font-medium whitespace-nowrap truncate max-w-[100px] md:max-w-none text-black uppercase\"\r\n                >\r\n                    {currentItem ? currentItem.id : value}\r\n                </Link>\r\n                </li>\r\n            </Fragment>\r\n            );\r\n        })}\r\n        </ol>\r\n    </nav>\r\n    )\r\n}\r\n\r\nexport default Path;","import Path from \"../compontents/Path\";\r\nimport { usePropsContext } from \"../compontents/StateContext\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\r\n\r\nimport { Pagination } from \"@nextui-org/react\"; // Если работаем с nextui библиотекой, то нужно не только установить в проект, но и дополнить tailwind\r\nimport {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from \"@nextui-org/react\";\r\n\r\nimport { TokenIcon } from '@web3icons/react'\r\n\r\n\r\nconst Nft = () => {\r\n\r\n    const {nftPageCount} = useParams<{nftPageCount: string}>();\r\n    console.log(nftPageCount)\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const {currentPage, nftData, setCurrentPage, onPage} = usePropsContext();\r\n\r\n    const lastPostIndex = currentPage * onPage;\r\n    const firstPostIndex = lastPostIndex - onPage;\r\n    const currentPages = nftData.slice(firstPostIndex, lastPostIndex);\r\n\r\n    const handlePageClick = (page: number) => {\r\n        navigate(`/nft/${page}`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (nftPageCount) {\r\n            setCurrentPage(Number(nftPageCount))\r\n        }\r\n    }, [nftPageCount, currentPage])\r\n\r\n    return (\r\n        <section className=\"nft\">\r\n            <div className=\"w-4/6 mx-auto\">\r\n                <Path/>\r\n            </div>\r\n            <div className=\"nft-container md:w-4/6 xs:w-11/12 mx-auto flex flex-wrap justify-center\">\r\n            <Table aria-label=\"Example static collection table\">\r\n                <TableHeader>\r\n                <TableColumn>Назва</TableColumn>\r\n                <TableColumn> </TableColumn>\r\n                <TableColumn>Блокчейн</TableColumn>\r\n                <TableColumn> </TableColumn>\r\n                <TableColumn>Сторінка NFT</TableColumn>\r\n                </TableHeader>\r\n                <TableBody>\r\n                {currentPages.map((item, index) => {\r\n                    return <TableRow className=\"hover:bg-gray-50 dark:hover:bg-gray-600\" key={index}>\r\n                        <TableCell>{item.collection_details.name}</TableCell>\r\n                        <TableCell><img src={item.collection_details.image_url} alt=\"\" className=\"min-w-8 max-w-8\" /></TableCell>\r\n                        <TableCell>{item.collection_details.chains.includes('ethereum') ? <TokenIcon symbol=\"eth\" variant=\"branded\" /> : item.collection_details.chains && item.collection_details.chains.includes('solana') ? <TokenIcon symbol=\"sol\" variant=\"branded\" /> : item.collection_details.chains && item.collection_details.chains.includes('polygon') ? <TokenIcon symbol=\"pol\" variant=\"branded\" /> : item.collection_details.chains}</TableCell>\r\n                        <TableCell> </TableCell>\r\n                        <TableCell>\r\n                            <a href={item.collection_details.external_url} target='_blank'>\r\n                                <button className=\"relative inline-flex text-xs items-center bg-indigo-50 justify-start px-3 py-1.5 overflow-hidden font-bold group w-max\">\r\n                                    <span className=\"w-32 h-32 rotate-45 translate-x-12 -translate-y-2 absolute left-0 top-0 bg-indigo-600 opacity-[3%]\"></span>\r\n                                    <span className=\"absolute top-0 left-0 w-48 h-48 -mt-1 transition-all duration-500 ease-in-out rotate-45 -translate-x-56 -translate-y-24 bg-indigo-600 opacity-100 group-hover:-translate-x-8\"></span>\r\n                                    <span className=\"relative w-full md:text-sm xs:text-xs font-normal text-left text-gray-900 transition-colors duration-200 ease-in-out group-hover:text-white\">\r\n                                        Перейти до NFT\r\n                                    </span>\r\n                                    <span className=\"absolute inset-0 border-2 border-white\"></span>\r\n                                </button>\r\n                            </a>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                })}\r\n                </TableBody>\r\n            </Table>\r\n            </div>\r\n            <div className=\"block mx-auto pt-8 text-center w-max\">\r\n                    <Pagination\r\n                        color='secondary'\r\n                        total={2}\r\n                        initialPage={1}\r\n                        page={currentPage}\r\n                        onChange={(page) => handlePageClick(page)}\r\n                    />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Nft;"],"names":["_ref","className","pathData","setPathData","useState","data","usePropsContext","pathnames","useLocation","pathname","split","filter","x","useEffect","dataForPath","map","item","_objectSpread","id","_jsx","concat","children","_jsxs","Link","to","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","value","index","slice","join","currentItem","find","console","log","Fragment","Nft","nftPageCount","useParams","navigate","useNavigate","currentPage","nftData","setCurrentPage","onPage","lastPostIndex","firstPostIndex","currentPages","Number","Path","Table","TableHeader","TableColumn","TableBody","TableRow","TableCell","collection_details","name","src","image_url","alt","chains","includes","TokenIcon","symbol","variant","href","external_url","target","Pagination","color","total","initialPage","page","onChange","handlePageClick"],"sourceRoot":""}