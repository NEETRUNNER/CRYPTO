{"version":3,"file":"static/js/47323.66ef72dc.chunk.js","mappings":"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","sources":["compontents/Path.tsx","compontents/Chart.tsx","navigation/CoinItem.tsx"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\r\nimport { Fragment } from \"react/jsx-runtime\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { usePropsContext } from \"./StateContext\";\r\n\r\nimport { CoinData } from \"./StateContext\";\r\n\r\nconst Path = ({className}: any) => {\r\n    const [pathData, setPathData] = useState<CoinData[]>();\r\n\r\n    const {data} = usePropsContext();\r\n\r\n    const location = useLocation();\r\n    const pathnames = location.pathname.split('/').filter((x) => x);\r\n\r\n    useEffect(() => {\r\n        const dataForPath = data.map(item => ({...item, id: item.id}));\r\n        setPathData(dataForPath);\r\n    }, []);\r\n\r\n    return (\r\n        <nav className={`py-6 aria-label=\"Breadcrumb ${className}`}>\r\n        <ol className=\"flex flex-wrap items-center gap-2 text-sm text-gray-600\">\r\n        <li>\r\n            <Link to=\"/\" className=\"block transition hover:text-gray-700 text-white\">\r\n            <span className=\"sr-only\">Home</span>\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"w-5 h-5 md:w-6 md:h-6\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n            >\r\n                <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\r\n                />\r\n            </svg>\r\n            </Link>\r\n        </li>\r\n\r\n        {pathnames.map((value, index) => {\r\n            const to = `/${pathnames.slice(0, index + 1).join('/')}`;\r\n            const currentItem = pathData ? pathData.find((item) => item.id === value) : null;\r\n            console.log(currentItem)\r\n\r\n            return (\r\n            <Fragment key={to}>\r\n                <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                strokeWidth=\"1.5\"\r\n                stroke=\"currentColor\"\r\n                className=\"w-4 h-4 md:w-5 md:h-5 text-gray-500\"\r\n                >\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 20.247l6-16.5\" />\r\n                </svg>\r\n                <li>\r\n                <Link\r\n                    to={to}\r\n                    className=\"block transition hover:text-gray-700 xs:text-xs md:text-md font-medium whitespace-nowrap truncate max-w-[100px] md:max-w-none text-white uppercase\"\r\n                >\r\n                    {currentItem ? currentItem.id : value}\r\n                </Link>\r\n                </li>\r\n            </Fragment>\r\n            );\r\n        })}\r\n        </ol>\r\n    </nav>\r\n    )\r\n}\r\n\r\nexport default Path;","import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ChartData, ChartOptions } from \"chart.js\"; // Для правильной работы не забывать импортировать типы чтобы переменная вела себя стабильно\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { usePropsContext } from \"./StateContext\";\r\n\r\n// Регистрация модулей Chart.js\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst Chart = () => {\r\n\r\n  const {chart} = usePropsContext();\r\n\r\n  // Обработка данных\r\n  const timestamps = chart.map((item) =>\r\n    new Date(item[0]).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })\r\n  );\r\n  const prices = chart.map((item) => item[1]);\r\n\r\n  // Данные для смешанного графика\r\n  const chartData: ChartData<\"line\"> = {\r\n    labels: timestamps,\r\n    datasets: [\r\n      {\r\n        type: \"line\", // Линия\r\n        label: \"Ціна\",\r\n        data: prices,\r\n        fill: false,\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        tension: 0.1\r\n      }\r\n    ],\r\n  };\r\n\r\n  // Опции графика\r\n  const options: ChartOptions<\"line\"> = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    resizeDelay: 2000,\r\n    scales: {\r\n      y: {\r\n        stacked: true,\r\n      },\r\n      x: {\r\n        ticks: {\r\n          display: false\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart-container\" style={{ width: \"100%\", height: \"100%\"}}>\r\n      <Line data={chartData} options={options} width='800px' height={'500px'}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import { Tab } from '@headlessui/react'\r\nimport { Popover, PopoverButton, PopoverPanel } from '@headlessui/react'\r\n\r\nimport { CoinData, usePropsContext } from \"../compontents/StateContext\";\r\nimport Chart from '../compontents/Chart';\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\n\r\nimport { GetCoinChart } from \"../other/GetApi\";\r\n\r\nimport Path from '../compontents/Path';\r\n\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nconst CoinModal = () => { \r\n    const [sizeMobile, setSizeMobile] = useState(window.innerWidth <= 480);\r\n    const [symbolCoin, setSymbolCoin] = useState<string>()\r\n\r\n    const { data, coinInfo, setCoinInfo, setLoading, setChart, setDataPrice, dataPrice, GetPriceCoin} = usePropsContext();\r\n\r\n    const location = useLocation();\r\n    const { coinId } = useParams<string>();\r\n    console.log(location)\r\n    console.log(coinId)\r\n\r\n    const settings = {\r\n        dots: false,\r\n        infinite: false,\r\n        centerPadding: \"60px\",\r\n        slidesToShow: 2,\r\n        speed: 500\r\n      };\r\n\r\n    const handleResize = () => {\r\n        setSizeMobile(window.innerWidth <= 480);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        const getCoin = () => {\r\n            const currentItem = data.find(item => item.id === coinId) as CoinData; // Убираем undefined с помощью утвержденного типа\r\n            console.log(currentItem);\r\n            setCoinInfo(currentItem)\r\n            if (currentItem) {\r\n                const symbol = `${currentItem.symbol}USDT`;\r\n                setSymbolCoin(symbol)\r\n                console.log(symbolCoin?.toLowerCase())\r\n            }\r\n\r\n            console.log(coinInfo);\r\n            console.log(coinInfo?.priceChange1h)\r\n        }\r\n        getCoin();\r\n    }, [data, coinInfo, coinId])\r\n\r\n    console.log(coinId)\r\n\r\n    useEffect(() => {\r\n        setDataPrice(coinInfo?.price)\r\n        console.log('Изменилась страница монеты')\r\n    }, [coinInfo])\r\n\r\n    useEffect(() => { // Данные про график\r\n        setChartDay();\r\n    }, [])\r\n\r\n    const setChartDay = () => {\r\n        GetCoinChart(coinId, '24h')\r\n            .then(data => {\r\n                setLoading(true)\r\n                console.log(data)\r\n                setChart(data)\r\n            })\r\n            .catch(Error => {\r\n                setLoading(true)\r\n                console.log(Error)\r\n                throw new Error\r\n            })\r\n            .finally(() => {\r\n                setLoading(false)\r\n            })\r\n    }\r\n\r\n    const setChartWeek = () => {\r\n        GetCoinChart(coinId, '1w')\r\n            .then(data => {\r\n                setLoading(true)\r\n                console.log(data)\r\n                setChart(data)\r\n            })\r\n            .catch(Error => {\r\n                setLoading(true)\r\n                console.log(Error)\r\n                throw new Error\r\n            })\r\n            .finally(() => {\r\n                setLoading(false)\r\n            })\r\n    }\r\n\r\n    const setChartMonth = () => {\r\n        GetCoinChart(coinId, '1m')\r\n            .then(data => {\r\n                setLoading(true)\r\n                console.log(data)\r\n                setChart(data)\r\n            })\r\n            .catch(Error => {\r\n                setLoading(true)\r\n                console.log(Error)\r\n                throw new Error\r\n            })\r\n            .finally(() => {\r\n                setLoading(false)\r\n            })\r\n    }\r\n\r\n    const setChartHalfYear = () => {\r\n        GetCoinChart(coinId, '6m')\r\n            .then(data => {\r\n                setLoading(true)\r\n                console.log(data)\r\n                setChart(data)\r\n            })\r\n            .catch(Error => {\r\n                setLoading(true)\r\n                console.log(Error)\r\n                throw new Error\r\n            })\r\n            .finally(() => {\r\n                setLoading(false)\r\n            })\r\n    }\r\n\r\n    const setChartYear = () => {\r\n        GetCoinChart(coinId, '1y')\r\n            .then(data => {\r\n                setLoading(true)\r\n                console.log(data)\r\n                setChart(data)\r\n            })\r\n            .catch(Error => {\r\n                setLoading(true)\r\n                console.log(Error)\r\n                throw new Error\r\n            })\r\n            .finally(() => {\r\n                setLoading(false)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!symbolCoin) {\r\n            return;\r\n        }\r\n        GetPriceCoin(symbolCoin)\r\n            .then(avgPrice => {\r\n                console.log(avgPrice)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    });\r\n\r\n    return (\r\n        <>\r\n        {coinInfo ? (\r\n            <section className=\"coin bg-gradient-to-br from-gray-900 to-black h-full\">\r\n                    <div className=\"coin-container md:w-4/6 xs:w-4/5 mx-auto py-8 h-full\">\r\n                        <Path/>\r\n                            <div className=\"flex items-center\">\r\n                                <img src={coinInfo.icon} alt=\"\" className=\"md:w-16 xs:w-12 h-auto\" />\r\n                                <h3 className=\"md:text-2xl xs:text-lg font-bold uppercase text-white ml-2\">\r\n                                Ціна {coinInfo.name} ({coinInfo.symbol})\r\n                                </h3>\r\n                            </div>\r\n\r\n                        <div className='flex justify-between flex-wrap items-center'>\r\n                            <div className=\"flex pt-4\">\r\n                                    <h1 className=\"coin-price md:text-2xl xs:text-xl font-bold uppercase text-white\">{dataPrice?.toFixed(2)}</h1> \r\n                                    <p className=\"coin-price__changed md:text-2xl xs:text-xl font-bold uppercase text-green-400 ml-2\">{Number.isNaN(dataPrice) ? null : coinInfo.priceChange1h}</p>\r\n                            </div>\r\n\r\n                            <Popover>\r\n                                <PopoverButton className=\"relative inline-flex items-center justify-center py-1.5 px-2.5 overflow-hidden font-medium text-indigo-600 transition duration-300 ease-out border-2 border-indigo-500 shadow-md group xs:mt-4 md:ml-0 xs:ml-2 text-xs\">\r\n                                    <span\r\n                                    className=\"absolute inset-0 flex items-center justify-center w-full h-full text-white duration-300 -translate-x-full bg-indigo-500 group-hover:translate-x-0 ease\">\r\n                                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M14 5l7 7m0 0l-7 7m7-7H3\"></path>\r\n                                    </svg>\r\n                                    </span>\r\n                                    <span\r\n                                    className=\"absolute flex items-center text-base font-semibold justify-center w-full h-full text-indigo-500 transition-all duration-300 transform group-hover:translate-x-full ease\">Посилання</span>\r\n                                    <span className=\"relative font-semibold invisible text-sm\">Button Text</span>\r\n                                </PopoverButton >\r\n                                \r\n                                <PopoverPanel\r\n                                    transition\r\n                                    anchor=\"bottom\"\r\n                                    className=\"divide-y divide-white/5 rounded-xl bg-white/5 text-sm/6 transition duration-200 ease-in-out [--anchor-gap:var(--spacing-5)] data-[closed]:-translate-y-1 data-[closed]:opacity-0\"\r\n                                >\r\n                                    <div className=\"p-3\">\r\n                                    <a className=\"block rounded-lg py-2 px-3 transition hover:bg-white/5\" href={coinInfo.twitterUrl} target='_blank'>\r\n                                        <p className=\"font-semibold text-white\">Twitter</p>\r\n                                    </a>\r\n                                    <a className=\"block rounded-lg py-2 px-3 transition hover:bg-white/5\" href={coinInfo.redditUrl} target='_blank'>\r\n                                        <p className=\"font-semibold text-white\">Reddit</p>\r\n                                    </a>\r\n                                    </div>\r\n                                </PopoverPanel>\r\n                            </Popover>\r\n\r\n                        </div>\r\n                        \r\n                        <Tab.Group className='md:pt-6 xs:pt-12'>\r\n                        <Tab.List>\r\n                            {sizeMobile ? <Slider {...settings}>\r\n                                <Tab className={({selected }) => `coin-btn__mobile ${selected ? 'text-white' : 'text-slate-500'}`} onClick={setChartDay}>День</Tab>\r\n                                <Tab className={({selected }) => `coin-btn__mobile ${selected ? 'text-white' : 'text-slate-500'}`} onClick={setChartWeek}>Тиждень</Tab>\r\n                                <Tab className={({selected }) => `coin-btn__mobile ${selected ? 'text-white' : 'text-slate-500'}`} onClick={setChartMonth}>Місяць</Tab>\r\n                                <Tab className={({selected }) => `coin-btn__mobile ${selected ? 'text-white' : 'text-slate-500'}`} onClick={setChartYear}>Пів року</Tab>\r\n                                <Tab className={({selected }) => `coin-btn__mobile ${selected ? 'text-white' : 'text-slate-500'}`} onClick={setChartHalfYear}>Рік</Tab>\r\n                            </Slider> \r\n                            : \r\n                            <>\r\n                                <Tab className={({selected }) => `coin-btn__default ${selected ? 'bg-white' : 'bg-slate-500'}`} onClick={setChartDay}>День</Tab>\r\n                                <Tab className={({selected }) => `coin-btn__default ${selected ? 'bg-white' : 'bg-slate-500'}`} onClick={setChartWeek}>Тиждень</Tab>\r\n                                <Tab className={({selected }) => `coin-btn__default ${selected ? 'bg-white' : 'bg-slate-500'}`} onClick={setChartMonth}>Місяць</Tab>\r\n                                <Tab className={({selected }) => `coin-btn__default ${selected ? 'bg-white' : 'bg-slate-500'}`} onClick={setChartYear}>Пів року</Tab>\r\n                                <Tab className={({selected }) => `coin-btn__default ${selected ? 'bg-white' : 'bg-slate-500'}`} onClick={setChartHalfYear}>Рік</Tab>\r\n                            </>\r\n                            }\r\n                        </Tab.List>\r\n                         \r\n                        <Tab.Panels className='pt-6'>\r\n                            <Tab.Panel className='w-full'><Chart/></Tab.Panel>\r\n                            <Tab.Panel className='w-full'><Chart/></Tab.Panel>\r\n                            <Tab.Panel className='w-full'><Chart/></Tab.Panel>\r\n                            <Tab.Panel className='w-full'><Chart/></Tab.Panel>\r\n                            <Tab.Panel className='w-full'><Chart/></Tab.Panel> \r\n                        </Tab.Panels>\r\n                        </Tab.Group>\r\n                    </div>\r\n            </section>\r\n        ) : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CoinModal;"],"names":["_ref","className","pathData","setPathData","useState","data","usePropsContext","pathnames","useLocation","pathname","split","filter","x","useEffect","dataForPath","map","item","_objectSpread","id","_jsx","concat","children","_jsxs","Link","to","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","value","index","slice","join","currentItem","find","console","log","Fragment","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Chart","chart","chartData","labels","Date","toLocaleTimeString","hour","minute","datasets","type","label","borderColor","tension","style","width","height","Line","options","responsive","maintainAspectRatio","resizeDelay","scales","y","stacked","ticks","display","CoinModal","sizeMobile","setSizeMobile","window","innerWidth","symbolCoin","setSymbolCoin","coinInfo","setCoinInfo","setLoading","setChart","setDataPrice","dataPrice","GetPriceCoin","location","coinId","useParams","getCoin","symbol","toLowerCase","priceChange1h","price","setChartDay","GetCoinChart","then","catch","Error","finally","setChartWeek","setChartMonth","setChartHalfYear","setChartYear","avgPrice","error","_Fragment","Path","src","icon","alt","name","toFixed","Number","isNaN","Popover","PopoverButton","PopoverPanel","transition","anchor","href","twitterUrl","target","redditUrl","Tab","Group","List","Slider","dots","infinite","centerPadding","slidesToShow","speed","selected","onClick","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","Panels","Panel"],"sourceRoot":""}